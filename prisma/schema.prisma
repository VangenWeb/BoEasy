// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String    @id @default(cuid())
  role                  String    @default("user")

  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  primaryGroup          Group?    @relation("primaryGroup", fields: [primaryGroupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  primaryGroupId        String?
  groups                Group[]
  ownedGroups           Group[]   @relation("owner")
  adminGroups           Group[]   @relation("groupAdmins")
  schemaData            SchemaData[]

  @@index([primaryGroupId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  ownerId   String
  owner     User     @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  admins    User[]   @relation("groupAdmins")
  users     User[]
  primaryUsers User[] @relation("primaryGroup") 

  folders   SchemaFolder[]
  schemas   Schema[]
  schemaData SchemaData[]

  @@index([ownerId])
}

model SchemaFolder {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  name      String

  parentId  String?
  parent    SchemaFolder? @relation("parent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  children  SchemaFolder[] @relation("parent")
  schemas   Schema[] @relation("parent")

  @@index([parentId])
  @@index([groupId])
}

model Schema {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name       String
  recurrence SchemaRecurrence  
  audience   SchemaAudience
  fields     Field[]

  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  parentFolderId String?
  parentFolder SchemaFolder? @relation("parent", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  data      SchemaData[]

  @@index([parentFolderId])
  @@index([groupId])
}

model Field {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  type      FieldType
  schema    Schema   @relation(fields: [schemaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schemaId  String

  @@index([schemaId])
}

model SchemaData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String?
  createdBy User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)

  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Restrict)

  schemaId  String
  schema    Schema   @relation(fields: [schemaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  delivered Boolean  @default(false)
  data      Json

  @@index([schemaId])
  @@index([groupId])
  @@index([createdById])
}

enum SchemaRecurrence {
  none
  monthly
  quarterly
  yearly
	@@map("Recurrence")
}

enum SchemaAudience {
  none
  group
  owner
  @@map("Audience")
}

enum FieldType {
  text
  number
  checkbox
  title
}